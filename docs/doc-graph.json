{
  "generated": "2025-08-13T16:34:07.207Z",
  "nodes": [
    {
      "path": "docs/README.md",
      "title": "About Time (ATP) – Documentation Hub",
      "breadcrumb": "Docs > Index",
      "size": 4925,
      "headings": [
        "Hierarchy Overview",
        "Update Process (Lightweight Checklist)",
        "Breadcrumb Validation Automation",
        "AI Prompt Integration (Meta Process)",
        "Authoritative vs Derivative",
        "Breadcrumb Pattern",
        "Adding A New Feature Spec",
        "Quick Links",
        "Maintenance Cadence"
      ],
      "openQuestions": [
        "CI gate: fail if diff includes src/ changes without doc updates for related breadcrumbs.",
        "Embedding-based semantic retrieval of node excerpts."
      ],
      "excerpt": "# About Time (ATP) – Documentation Hub Breadcrumb: Docs > Index This folder hosts the living, hierarchical documentation set. Every substantive feature/change should update (or add) a markdown file and cross-link affected specs. Keep documents small, purpose-driven, and linked upward and downward. ## Hierarchy Overview Root (this index) - Architecture & Feature Specs - Root Architecture: [src/feature-description.md](../src/feature-description.md) - Feature Architecture Summary: [src/feature-architecture-summary.md](../src/feature-architecture-summary.md) - Components System: [src/components/feature-description.md](../src/components/feature-description.md) - Functions System: [src/functions/feature-description.md](../src/functions/feature-description.md) - Hooks System: [src/hooks/feature-d",
      "lastModifiedEpoch": 1755102843101
    },
    {
      "path": "docs/food-mvp-anchor.md",
      "title": "Food Vertical MVP – Anchor Document",
      "breadcrumb": "Docs > Initiatives > Food MVP Anchor",
      "size": 4282,
      "headings": [
        "Vision (tip of the wedge)",
        "Core pillars",
        "Scope for MVP (M0)",
        "Out-of-scope for M0",
        "Data model (interim)",
        "Execution UX rules",
        "QR onboarding",
        "Firebase plan",
        "Milestones",
        "Open tasks backlog"
      ],
      "openQuestions": [],
      "excerpt": "# Food Vertical MVP – Anchor Document Breadcrumb: Docs > Initiatives > Food MVP Anchor Purpose: Living plan to ship the food-focused MVP (meal plans, shopping, prep time, cost, flexible rescheduling, QR import) with Firebase backend. ## Vision (tip of the wedge) - Build repeatable “meal playbooks” (templates) and schedule instances onto your week. - See what you can cook from pantry variables, with prep time and cost. - Handle overlaps by prompting a quick prioritization decision at execution time. - Onboard via QR: scan a code to open the web app and auto-import the shared item/template. ## Core pillars 1) Templates vs Instances - Templates: recipes, prep blocks, shopping trips, weekly meal plans (containers). - Instances: scheduled cook/prep/shopping times on the calendar. 2) SubCalendar",
      "lastModifiedEpoch": 1755099696068
    },
    {
      "path": "docs/item-system.md",
      "title": "Item System Documentation",
      "breadcrumb": "Docs > Domain Model > Item System",
      "size": 5484,
      "headings": [
        "Overview",
        "Key Architectural Concepts",
        "Item Templates vs. Scheduled Instances",
        "Template Types",
        "Core Classes",
        "Item (Abstract Base Class)",
        "BasicItem",
        "SubCalendarItem",
        "CheckListItem",
        "Relationship Classes",
        "Parent",
        "Child",
        "CheckListChild",
        "Key Methods and Functions",
        "SubCalendarItem.scheduleChild()",
        "Utility Functions (itemUtils.ts)",
        "Creating Items with Parents",
        "Best Practices"
      ],
      "openQuestions": [],
      "excerpt": "# Item System Documentation Breadcrumb: Docs > Domain Model > Item System ## Overview The Item system is a hierarchical task management system built around **item templates** that can be instantiated as scheduled tasks. ### Key Architectural Concepts #### Item Templates vs. Scheduled Instances The system maintains a critical distinction between templates and instances: **Item Templates:** - Reusable definitions stored in the global items array - Define structure, relationships, and default properties - Have no execution state, completion status, or scheduling information - What users create, edit, and manage through the UI - Can be instantiated multiple times as scheduled tasks **Scheduled Instances:** - Actual executions of templates placed on calendars/timelines - Have specific start tim",
      "lastModifiedEpoch": 1755099696067
    },
    {
      "path": "docs/diagrams/README.md",
      "title": "Diagrams Index",
      "breadcrumb": "Docs > Diagrams > Index",
      "size": 1455,
      "headings": [
        "Files",
        "Source of Truth References",
        "Update Trigger Checklist"
      ],
      "openQuestions": [],
  "excerpt": "# Diagrams Index Breadcrumb: Docs > Diagrams > Index Diagrams and visual aides summarizing authoritative textual specs. Whenever a referenced source spec changes, confirm whether the diagram text needs regeneration. ## Files - **Architecture Diagram**: high-level module & data flow (architecture.md) - **Data Model Diagram**: entity relationships & invariants mapping (data_model.md) - **Algorithms Notes**: key algorithmic strategies (scheduling, variable summaries) (algorithms.md) - **API Endpoints**: current + planned HTTP interface (api_endpoints.md) - **Usage Walkthrough**: narrative user journey annotated with system touchpoints (USAGE.md) ## Source of Truth References Authoritative specs these diagrams summarize: - Root Ar",
      "lastModifiedEpoch": 1755099477273
    },
    {
      "path": "docs/diagrams/architecture.md",
      "title": "Architecture Diagram (Textual Summary)",
      "breadcrumb": "Docs > Diagrams > Architecture",
      "size": 895,
      "headings": [
        "Layered View",
        "Key Flows",
        "Boundaries"
      ],
      "openQuestions": [],
      "excerpt": "# Architecture Diagram (Textual Summary) Breadcrumb: Docs > Diagrams > Architecture Last Regenerated: 2025-08-13 Authoritative Sources: - ../../src/feature-description.md (root) - ../../src/components/feature-description.md - ../../src/functions/feature-description.md - ../../src/hooks/feature-description.md ## Layered View Presentation (React Components) -> Hooks (Integration & stateful orchestration) -> Functions (Pure business logic & reducers) -> Persistence (localStorage now, planned Firebase) -> External Services. ## Key Flows - Action Dispatch: Component -> Hook -> Context Dispatch -> Reducer -> State Persist -> Re-render subscribers. - Scheduling: UI Dialog -> Hook (validation) -> Functions (time calc) -> State -> Instance listing. ## Boundaries - UI never mutates domain objects di",
      "lastModifiedEpoch": 1755099477273
    },
    {
      "path": "docs/diagrams/data_model.md",
      "title": "Data Model Diagram (Textual Summary)",
      "breadcrumb": "Docs > Diagrams > Data Model",
      "size": 1023,
      "headings": [
        "Entities",
        "Invariants (Selections)",
        "Relationships",
        "Notes"
      ],
      "openQuestions": [],
      "excerpt": "# Data Model Diagram (Textual Summary) Breadcrumb: Docs > Diagrams > Data Model Last Regenerated: 2025-08-13 Authoritative Source: ../../src/DATA_MODEL_SPEC.md ## Entities - Item (template) { id, name, duration, parents[], variables{}, variableSummary{} } - ItemInstance { id, itemId, calendarEntryId, scheduledStartTime, actualStartTime?, completedAt?, status, parentItemId?, executionDetails } - Parent { id, relationshipId } - Child (SubCalendar) { id, start, relationshipId } - CheckListChild { itemId, complete, relationshipId } ## Invariants (Selections) - Duration uniqueness across parent-child links (heuristic DAG safeguard). - ItemInstance terminal status requires completedAt. - Variable summary excludes item's own variables. ## Relationships Item 1--* Parent (reverse edges) -> Item (pa",
      "lastModifiedEpoch": 1755099477273
    },
    {
      "path": "docs/diagrams/algorithms.md",
      "title": "Algorithms Notes",
      "breadcrumb": "Docs > Diagrams > Algorithms",
      "size": 1091,
      "headings": [
        "1. Duration-Based Acyclic Heuristic",
        "2. Variable Summary Propagation",
        "3. Scheduling Conflict Detection",
        "4. Overdue Calculation"
      ],
      "openQuestions": [],
      "excerpt": "# Algorithms Notes Breadcrumb: Docs > Diagrams > Algorithms Last Updated: 2025-08-13 Focus: Domain-specific algorithm strategies (not general code walkthroughs). Keep concise; link to authoritative specs. ## 1. Duration-Based Acyclic Heuristic Instead of full cycle detection, enforce parent.duration != child.duration. Provides lightweight partial order for practical hierarchies. Source: ../../src/DATA_MODEL_SPEC.md#4-duration-uniqueness-enforcement ## 2. Variable Summary Propagation Upon variable change in item template: recompute leaf deltas, propagate upward through parent chains, excluding self variables; memoize per itemId + variable key. ## 3. Scheduling Conflict Detection SubCalendarItem uses interval tree (planned / existing) to test [start, start+duration) overlaps; conflicts allow",
      "lastModifiedEpoch": 1755099477283
  },
    {
      "path": "docs/diagrams/api_endpoints.md",
      "title": "API Endpoints (Planned / Current)",
      "breadcrumb": "Docs > Diagrams > API Endpoints",
      "size": 692,
      "headings": [
        "Public Import (QR)",
        "Calendar Conflicts (Planned)",
        "Auth (Future)"
      ],
      "openQuestions": [],
      "excerpt": "# API Endpoints (Planned / Current) Breadcrumb: Docs > Diagrams > API Endpoints Last Updated: 2025-08-13 Status: Minimal public endpoints; expansion planned with Firebase migration. ## Public Import (QR) POST /public/templates/:ownerId/:hash/clone -> Clones a public template into requesting user workspace. Query Params (landing): importOwner, importHash (handled client-side then POST). ## Calendar Conflicts (Planned) GET /api/calendar/conflicts?from=..&to=.. -> Returns overlapping instance groups. ## Auth (Future) Firebase direct client SDK; server endpoints only for migration / bridging if needed. Source References: - ../food-mvp-anchor.md - ../../src/feature-description.md",
      "lastModifiedEpoch": 1755099477292
    },
    {
      "path": "docs/diagrams/USAGE.md",
      "title": "Usage Walkthrough (Narrative)",
      "breadcrumb": "Docs > Diagrams > Usage Walkthrough",
      "size": 707,
      "headings": [],
      "openQuestions": [],
  "excerpt": "# Usage Walkthrough (Narrative) Breadcrumb: Docs > Diagrams > Usage Walkthrough Last Updated: 2025-08-13 Scenario: User scans QR for a Meal Plan template. 1. Browser opens app with importOwner & importHash. 2. Client POSTs clone endpoint; receives new template id. 3. Sidebar focuses imported template (focused view editing template, not instance). 4. User schedules template -> creates ItemInstance(s) with scheduledStartTime. 5. (Execution surface removed; redesign pending) 6. Variable summaries show updated pantry counts. Cross-Links: - Data Model: ../../src/DATA_MODEL_SPEC.md - Architecture: ../../src/feature-description.md - Food MVP Anchor: ../food-mvp-anchor.md",
      "lastModifiedEpoch": 1755099477292
    },
    {
      "path": "src/DATA_MODEL_SPEC.md",
      "title": "Data Model Specification",
      "breadcrumb": "Docs > Domain Model > Data Model Specification",
      "size": 6031,
      "headings": [
        "1. Items",
        "2. Item Instances",
        "3. Variables",
        "4. Duration Uniqueness Enforcement",
        "5. Overdue Instance Determination",
        "6. Serialization Contracts",
        "7. Backward Compatibility Strategy",
        "8. Validation Utilities (Planned)",
        "9. Open Questions (Track & Resolve)"
      ],
      "openQuestions": [
        "Should partial automatically transition to complete after all checklist children complete? (Pending spec.)",
        "Should canceled set completedAt? (Currently yes; treat as terminal timestamp.)"
      ],
      "excerpt": "# Data Model Specification Breadcrumb: Docs > Domain Model > Data Model Specification Cross-Links: [Data Model Diagram](../docs/diagrams/data_model.md) | [Item System Doc](../docs/item-system.md) | [Architecture](./feature-description.md) # Data Model Specification Authoritative definitions for core domain entities (Items, Item Instances, Variables) and their invariants. This document reduces ambiguity and prevents architectural drift. ## 1. Items Items are immutable templates that define name, duration, variables, and parent relationships. Key fields: - id: string (UUID) - name: string - duration: number (ms) - parents: Parent[] (references to parent item ids) - variables: Record<string, number> - variableSummary: Record<string, number> (aggregated variables of descendants – exclusive of ",
      "lastModifiedEpoch": 1755102835763
    },
    {
      "path": "src/feature-description.md",
      "title": "About Time (ATP) - Root Application Architecture",
      "breadcrumb": "Docs > Architecture > Root Application Architecture",
      "size": 4454,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Application Structure",
        "Major System Modules",
        "Data Flow",
        "State Management Architecture",
        "Core Data Flow",
        "Integration Points",
        "Item System Integration",
        "Variable System Integration",
        "View System Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Data Migration Complexity",
        "Browser Compatibility",
        "Development Notes",
        "Architecture Principles",
        "Extension Points"
      ],
      "openQuestions": [],
      "excerpt": "# About Time (ATP) - Root Application Architecture Breadcrumb: Docs > Architecture > Root Application Architecture ## Feature Overview About Time (ATP) is a comprehensive React/TypeScript task management and productivity application that enables users to create, manage, schedule, and execute hierarchical task items with sophisticated variable tracking and relationship management. The application provides both accounting (overview) and execution (focused) views to support different user workflows. ## Key Components ### Core Application Structure - **`main.tsx`**: Application entry point with React root and provider setup - **`components/App.tsx`**: Root component orchestrating Header, MainBody, SideBar, and NotificationSystem - **`components/MainBody.tsx`**: Main content area routing betwee",
      "lastModifiedEpoch": 1755099696078
    },
    {
      "path": "src/feature-architecture-summary.md",
      "title": "Feature Description Architecture - Hierarchical Documentation Summary",
      "breadcrumb": "Docs > Architecture > Feature Architecture Summary",
      "size": 8099,
      "headings": [
        "Overview",
        "Hierarchical Structure and Consistency Validation",
        "Root Level (`src/feature-description.md`)",
        "Primary System Level Consistency",
        "Components System (`src/components/feature-description.md`)",
        "Functions System (`src/functions/feature-description.md`)",
        "Hooks System (`src/hooks/feature-description.md`)",
        "LocalStorage Implementation (`src/localStorageImplementation/feature-description.md`)",
        "Reducer Contexts (`src/reducerContexts/feature-description.md`)",
        "Specialized Subsystem Level Consistency",
        "Component Subsystems",
        "Function Subsystems",
        "Storage Subsystems",
        "Testing System",
        "Cross-System Integration Validation",
        "State Management Flow Consistency",
        "Component-Function Separation",
        "Data Flow Patterns",
        "Integration Reference Accuracy",
        "Variable System Integration",
        "Architectural Integrity Assessment",
        "Core Principles Consistency",
        "Extension Point Consistency",
        "Quality Assurance Alignment",
        "Summary and Validation Results",
        "Hierarchical Consistency: ✅ PASSED",
        "Integration Point Accuracy: ✅ PASSED",
        "Architectural Integrity: ✅ PASSED",
        "Feature Coverage: ✅ COMPREHENSIVE"
      ],
      "openQuestions": [],
      "excerpt": "# Feature Description Architecture - Hierarchical Documentation Summary Breadcrumb: Docs > Architecture > Feature Architecture Summary ## Overview This document provides a comprehensive overview of the hierarchical feature description system created for the About Time (ATP) application, ensuring consistency across all documentation levels and validating the architectural integrity of the system. ## Hierarchical Structure and Consistency Validation ### Root Level (`src/feature-description.md`) **Architecture Foundation**: Establishes core React/TypeScript task management application with hierarchical item system, variable tracking, and dual-view architecture (execution/accounting). **Key Integration Points**: - Context-based state management with AppReducer - localStorage persistence with m",
      "lastModifiedEpoch": 1755099696078
    },
    {
      "path": "src/components/feature-description.md",
      "title": "Components System - UI Layer Architecture",
      "breadcrumb": "Docs > Architecture > Components System",
      "size": 6370,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Layout Components",
        "Item Management Components",
        "Focused Template Editing Components",
        "Dialog and Modal Components",
        "Execution and Workflow Components",
        "Specialized Feature Directories",
        "Data Flow",
        "Component Communication Patterns",
        "State Management Integration",
        "Integration Points",
        "Material-UI Theme Integration",
        "Business Logic Integration",
        "Persistence Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Accessibility Compliance",
        "Browser Compatibility",
        "Development Notes",
        "Component Architecture Principles",
        "Testing Strategy",
        "Extension Patterns"
      ],
      "openQuestions": [],
      "excerpt": "# Components System - UI Layer Architecture Breadcrumb: Docs > Architecture > Components System ## Feature Overview The components system provides the complete React UI layer for the About Time application, organized into a hierarchical component architecture that supports both execution-focused and accounting-overview workflows. Components are built using Material-UI and follow consistent design patterns throughout the application. ## Key Components ### Core Layout Components - **`App.tsx`**: Root component orchestrating the main application layout - **`Header.tsx`**: Top navigation bar with view switching and action buttons - **`MainBody.tsx`**: Central content area that routes between execution and accounting views - **`SideBar.tsx`**: Collapsible sidebar with filters, search, and navig",
      "lastModifiedEpoch": 1755099696088
    },
    {
      "path": "src/functions/feature-description.md",
      "title": "Functions System - Business Logic and State Management",
      "breadcrumb": "Docs > Architecture > Functions System",
      "size": 5413,
      "headings": [
        "Feature Overview",
        "Key Components",
        "State Management Core",
        "Item System Utilities",
        "Utility Functions",
        "Data Flow",
        "State Reduction Pattern",
        "Item Management Flow",
        "Calculation and Processing",
        "Integration Points",
        "Storage Layer Integration",
        "Component Layer Integration",
        "Calendar and Scheduling Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "State Management Complexity",
        "Migration and Compatibility",
        "Development Notes",
        "Architecture Principles",
        "Testing Strategy",
        "Extension Patterns"
      ],
      "openQuestions": [],
      "excerpt": "# Functions System - Business Logic and State Management Breadcrumb: Docs > Architecture > Functions System ## Feature Overview The functions system contains the core business logic, state management, and data processing utilities for the About Time application. This layer handles all non-UI logic including state reduction, item management, variable calculations, and data transformations, maintaining clear separation from the presentation layer. ## Key Components ### State Management Core - **`reducers/AppReducer.ts`**: Central state reducer managing all application state transitions - **`reducers/`**: Additional specialized reducers for complex state management scenarios ### Item System Utilities - **`utils/item/`**: Comprehensive item management system with hierarchical relationship supp",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/functions/reducers/feature-description.md",
      "title": "Reducers System - State Management Core",
      "breadcrumb": "Docs > Architecture > Functions System > Reducers",
      "size": 6749,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Reducer Infrastructure",
        "Specialized Reducer Logic",
        "State Validation and Integrity",
        "Data Flow",
        "Action Processing Pipeline",
        "Batch Operation Support",
        "Integration Points",
        "Component Integration",
        "Persistence Integration",
        "Business Logic Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "State Complexity Management",
        "Type Safety Maintenance",
        "Development Notes",
        "Reducer Design Principles",
        "State Management Patterns",
        "Testing and Quality Assurance",
        "Extension and Maintenance"
      ],
      "openQuestions": [],
      "excerpt": "# Reducers System - State Management Core Breadcrumb: Docs > Architecture > Functions System > Reducers ## Feature Overview The reducers system provides the central state management for the About Time application, implementing a Redux-like pattern with immutable state updates, action-based state transitions, and comprehensive state validation. This system serves as the single source of truth for all application state and coordinates state changes across all application features. ## Key Components ### Core Reducer Infrastructure - **`AppReducer.ts`**: Main application reducer handling all state transitions with immutable updates - **Action type definitions**: Comprehensive action types for all application state changes - **State type definitions**: Complete TypeScript interfaces for applica",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/functions/utils/feature-description.md",
      "title": "Functions Utils System - Core Business Logic Utilities",
      "breadcrumb": "Docs > Architecture > Functions System > Utils",
      "size": 7094,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Item System Management",
        "Variable System Infrastructure",
        "Performance and Optimization",
        "Data Processing and Filtering",
        "General Utilities",
        "Data Flow",
        "Utility Function Architecture",
        "Data Validation and Integrity",
        "Integration Points",
        "Reducer Integration",
        "Component Integration",
        "Storage Integration",
        "Hook Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Data Complexity Management",
        "Type Safety Maintenance",
        "Development Notes",
        "Architecture Principles",
        "Performance Optimization",
        "Testing and Quality Assurance",
        "Extension and Maintenance"
      ],
      "openQuestions": [],
      "excerpt": "# Functions Utils System - Core Business Logic Utilities Breadcrumb: Docs > Architecture > Functions System > Utils ## Feature Overview The functions utils system provides the comprehensive collection of utility functions, data structures, and business logic that powers the About Time application. This system includes item management, variable systems, performance optimization, filtering logic, and validation utilities that form the computational backbone of the application. ## Key Components ### Item System Management - **`item/`**: Complete item hierarchy system with inheritance, relationships, and type management - **`itemInstance/`**: Execution instance management separate from item templates - **Item factory patterns**: Creation and initialization utilities for all item types - **Item",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/functions/utils/item/feature-description.md",
      "title": "Item System - Core Data Model and Hierarchy Management",
      "breadcrumb": "Docs > Architecture > Functions System > Utils > Item System",
      "size": 7063,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Item Architecture",
        "Relationship Management",
        "Item Creation and Management",
        "Advanced Features",
        "Data Flow",
        "Item Lifecycle Management",
        "Hierarchical Data Management",
        "Integration Points",
        "Reducer Integration",
        "Variable System Integration",
        "Storage Integration",
        "Component Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Data Integrity Challenges",
        "Type System Complexity",
        "Development Notes",
        "Architecture Principles",
        "Design Patterns",
        "Testing and Quality Assurance",
        "Extension Strategies"
      ],
      "openQuestions": [],
      "excerpt": "# Item System - Core Data Model and Hierarchy Management Breadcrumb: Docs > Architecture > Functions System > Utils > Item System ## Feature Overview The item system provides the foundational data model for the About Time application, implementing a sophisticated hierarchical item architecture with multiple item types, bidirectional relationships, type-safe inheritance patterns, and comprehensive data management utilities. This system serves as the core entity model that all other application features build upon. ## Key Components ### Core Item Architecture - **`Item.ts`**: Base item interface defining common properties and behaviors - **`BasicItem.ts`**: Simple task item implementation with core functionality - **`CheckListItem.ts`**: Checklist container with child item management - **`Su",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/components/common/feature-description.md",
      "title": "Common Components - Shared UI Building Blocks",
      "breadcrumb": "Docs > Architecture > Components System > Common",
      "size": 5676,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Utility Components",
        "Interaction Components",
        "Data Display Components",
        "Data Flow",
        "Component Composition Pattern",
        "Reusability Architecture",
        "Integration Points",
        "Material-UI Integration",
        "Application-wide Integration",
        "Specialized System Integration",
        "Known Limitations/Considerations",
        "Maintenance Considerations",
        "Design System Evolution",
        "Performance Considerations",
        "Development Notes",
        "Component Design Principles",
        "Quality Assurance",
        "Documentation and Usage"
      ],
      "openQuestions": [],
      "excerpt": "# Common Components - Shared UI Building Blocks Breadcrumb: Docs > Architecture > Components System > Common ## Feature Overview The common components system provides reusable UI building blocks and utilities that are shared across the application. These components implement consistent design patterns, accessibility features, and common interaction patterns that maintain UI coherence throughout the About Time application. ## Key Components ### Utility Components - **Shared form components**: Consistent input fields, buttons, and form controls - **Layout components**: Common layout patterns and containers - **Navigation helpers**: Breadcrumbs, tabs, and navigation utilities - **Loading and feedback components**: Spinners, progress indicators, and status displays ### Interaction Components -",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/components/dialogs/feature-description.md",
      "title": "Dialog Components - Modal Interface System",
      "breadcrumb": "Docs > Architecture > Components System > Dialogs",
      "size": 5885,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Item Management Dialogs",
        "Variable System Dialogs",
        "Workflow and Process Dialogs",
        "System Management Dialogs",
        "Data Flow",
        "Dialog Lifecycle Management",
        "Form Management Integration",
        "Integration Points",
        "Global State Integration",
        "Component System Integration",
        "Business Logic Integration",
        "Known Limitations/Considerations",
        "User Experience Considerations",
        "State Management Complexity",
        "Performance Considerations",
        "Development Notes",
        "Dialog Design Principles",
        "Implementation Patterns",
        "Testing and Quality Assurance"
      ],
      "openQuestions": [],
      "excerpt": "# Dialog Components - Modal Interface System Breadcrumb: Docs > Architecture > Components System > Dialogs ## Feature Overview The dialog components system provides specialized modal interfaces for complex user interactions, data input, and workflow management. These components handle multi-step processes, complex form interactions, and specialized input scenarios that require focused user attention away from the main application interface. ## Key Components ### Item Management Dialogs - **Item creation dialogs**: Multi-step item creation with type selection and configuration - **Item editing dialogs**: Comprehensive item editing with validation and preview - **Bulk operation dialogs**: Multi-item operations with progress tracking and confirmation ### Variable System Dialogs - **Variable d",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/components/execution/feature-description.md",
      "title": "Execution Components - Task Execution Interface",
      "breadcrumb": "Docs > Architecture > Components System > Execution",
      "size": 5913,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Execution Interface",
        "Workflow Management",
        "Focus and Productivity Features",
        "Data Flow",
        "Execution State Management",
        "Task Transition Flow",
        "Integration Points",
        "Global State Integration",
        "Accounting View Coordination",
        "Timer and Schedule Integration",
        "Known Limitations/Considerations",
        "Focus and Attention Management",
        "Performance and Responsiveness",
        "User Experience Challenges",
        "Development Notes",
        "Design Principles",
        "Component Architecture",
        "Performance Optimization"
      ],
      "openQuestions": [],
      "excerpt": "# Execution Components - Task Execution Interface Breadcrumb: Docs > Architecture > Components System > Execution ## Feature Overview The execution components provide a focused, distraction-free interface for task execution and progress tracking. This system implements the core \"doing\" experience of the About Time application, with real-time progress tracking, current task display, and execution workflow management that keeps users focused on completion. ## Key Components ### Core Execution Interface - **Current task display**: Prominent display of the active task with progress indicators - **Execution controls**: Start, pause, complete, and navigation controls for task execution - **Progress visualization**: Real-time progress tracking with visual feedback and countdown timers - **Next ta",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/components/filters/feature-description.md",
      "title": "Filter Components - Search and Filtering Interface",
      "breadcrumb": "Docs > Architecture > Components System > Filters",
      "size": 6420,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Filtering Interface",
        "Variable-Based Filtering",
        "Search and Discovery",
        "Results and Display",
        "Data Flow",
        "Search and Filter Processing",
        "Real-Time Filter Updates",
        "Integration Points",
        "Item System Integration",
        "Variable System Integration",
        "Component Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "User Experience Challenges",
        "Data Consistency",
        "Development Notes",
        "Architecture Principles",
        "Implementation Patterns",
        "Testing and Quality Assurance"
      ],
      "openQuestions": [],
      "excerpt": "# Filter Components - Search and Filtering Interface Breadcrumb: Docs > Architecture > Components System > Filters ## Feature Overview The filter components system provides sophisticated search, filtering, and data discovery capabilities that enable users to find, organize, and analyze their tasks and items efficiently. This system includes text-based search, advanced filtering by multiple criteria, variable-based filtering, and intelligent search suggestions. ## Key Components ### Core Filtering Interface - **Search input components**: Text-based search with autocomplete and suggestion support - **Filter panel interfaces**: Multi-criteria filtering with category organization - **Quick filter buttons**: One-click filters for common search patterns - **Advanced filter dialogs**: Complex fil",
      "lastModifiedEpoch": 1755099696126
    },
    {
      "path": "src/components/notifications/feature-description.md",
      "title": "Notification Components - User Feedback and Communication System",
      "breadcrumb": "Docs > Architecture > Components System > Notifications",
      "size": 6378,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Core Notification Interface",
        "Specialized Notification Types",
        "Workflow Integration",
        "User Preference Management",
        "Data Flow",
        "Notification Lifecycle Management",
        "Priority and Queue Management",
        "Integration Points",
        "Global State Integration",
        "Component System Integration",
        "Business Logic Integration",
        "Known Limitations/Considerations",
        "User Experience Balance",
        "Performance Considerations",
        "Accessibility and Inclusion",
        "Development Notes",
        "Design Principles",
        "Implementation Patterns",
        "Testing and Quality Assurance"
      ],
      "openQuestions": [],
      "excerpt": "# Notification Components - User Feedback and Communication System Breadcrumb: Docs > Architecture > Components System > Notifications ## Feature Overview The notification components system provides comprehensive user feedback, system communication, and status reporting throughout the About Time application. This system handles success confirmations, error reporting, progress updates, and system status communication in a non-intrusive manner that supports user workflow rather than disrupting it. ## Key Components ### Core Notification Interface - **Toast notifications**: Temporary, non-intrusive notifications for actions and status updates - **Alert banners**: Persistent notifications for important system information - **Progress notifications**: Real-time progress updates for long-running",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/reducerContexts/feature-description.md",
      "title": "Reducer Contexts - State Management Integration",
      "breadcrumb": "Docs > Architecture > Reducer Contexts",
      "size": 5170,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Primary Application Context",
        "Specialized Contexts",
        "Data Flow",
        "Context Provider Pattern",
        "Type-Safe State Management",
        "Performance Optimization",
        "Integration Points",
        "AppReducer Integration",
        "Component Integration",
        "Persistence Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Context Complexity",
        "Type Safety Maintenance",
        "Development Notes",
        "Context Design Principles",
        "Custom Hook Integration",
        "Extension Patterns"
      ],
      "openQuestions": [],
      "excerpt": "# Reducer Contexts - State Management Integration Breadcrumb: Docs > Architecture > Reducer Contexts ## Feature Overview The reducer contexts system provides React Context-based state management that integrates global application state with component trees. This system creates the bridge between the Redux-like state management pattern and React's Context API, providing type-safe, predictable state management throughout the application. ## Key Components ### Primary Application Context - **`App.ts`**: Main application context definition with AppState type integration - **`CreateReducerContext.tsx`**: Generic factory for creating typed reducer contexts ### Specialized Contexts - **`NewItem.ts`**: Context for new item creation workflows and dialog state management - **`TimeInput.ts`**: Contex",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/utils/feature-description.md",
      "title": "Utils System - General-Purpose Utilities",
      "breadcrumb": "Docs > Architecture > Utils System",
      "size": 4281,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Validation Infrastructure",
        "Cross-Cutting Utilities",
        "Data Flow",
        "Validation Integration",
        "Utility Function Usage",
        "Integration Points",
        "Functions Layer Integration",
        "Component Layer Integration",
        "Storage Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Dependency Management",
        "Development Notes",
        "Utility Design Principles",
        "Testing Strategy",
        "Extension Patterns"
      ],
      "openQuestions": [],
      "excerpt": "# Utils System - General-Purpose Utilities Breadcrumb: Docs > Architecture > Utils System ## Feature Overview The utils system provides general-purpose utility functions and validation logic that support the broader application architecture. These utilities handle cross-cutting concerns and provide reusable functionality that doesn't fit into the more specialized system modules. ## Key Components ### Validation Infrastructure - **`validation.ts`**: Core validation functions for data integrity and type checking ### Cross-Cutting Utilities - Additional utility functions for common operations across the application - Helper functions for data transformation and manipulation - Shared constants and configuration values ## Data Flow ### Validation Integration 1. **Input Validation**: Utilities v",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "src/__tests__/feature-description.md",
      "title": "Testing System - Comprehensive Test Infrastructure",
      "breadcrumb": "Docs > Architecture > Testing System",
      "size": 7226,
      "headings": [
        "Feature Overview",
        "Key Components",
        "Integration Testing",
        "Performance Testing",
        "Utility Testing",
        "Specialized Test Categories",
        "Data Flow",
        "Test Execution Pipeline",
        "Continuous Integration",
        "Integration Points",
        "Application System Integration",
        "Development Workflow Integration",
        "Quality Assurance Integration",
        "Known Limitations/Considerations",
        "Test Maintenance Challenges",
        "Testing Complexity",
        "Resource and Infrastructure",
        "Development Notes",
        "Testing Philosophy",
        "Test Organization",
        "Quality Standards",
        "Continuous Improvement"
      ],
      "openQuestions": [],
      "excerpt": "# Testing System - Comprehensive Test Infrastructure Breadcrumb: Docs > Architecture > Testing System ## Feature Overview The testing system provides comprehensive test coverage for the About Time application, including unit tests, integration tests, performance benchmarks, and utility testing. This system ensures application reliability, performance, and maintainability through automated testing at multiple levels of the application architecture. ## Key Components ### Integration Testing - **`integration/`**: End-to-end integration tests validating complete user workflows - **Cross-system testing**: Testing of interactions between major application systems - **Workflow validation**: Complete user workflow testing from start to finish - **Data consistency testing**: Validation of data cons",
      "lastModifiedEpoch": 1755099696145
    },
    {
      "path": "src/hooks/feature-description.md",
      "title": "Custom Hooks System - Reusable State Logic",
      "breadcrumb": "Docs > Architecture > Hooks System",
      "size": 5831,
      "headings": [
        "Feature Overview",
        "Key Components",
        "State Management Hooks",
        "Variable System Hooks",
        "UI Interaction Hooks",
        "Data Management Hooks",
        "Data Flow",
        "Hook Integration Pattern",
        "Custom Hook Composition",
        "Integration Points",
        "Functions Layer Integration",
        "Components Layer Integration",
        "Global State Integration",
        "Known Limitations/Considerations",
        "Performance Considerations",
        "Hook Dependency Management",
        "Testing Complexity",
        "Development Notes",
        "Hook Design Principles",
        "Custom Hook Patterns",
        "Extension Strategies"
      ],
      "openQuestions": [],
      "excerpt": "# Custom Hooks System - Reusable State Logic Breadcrumb: Docs > Architecture > Hooks System ## Feature Overview The hooks system provides custom React hooks that encapsulate reusable stateful logic, UI interactions, and complex state management patterns. These hooks serve as the integration layer between the pure business logic functions and React components, providing clean APIs for common application patterns. ## Key Components ### State Management Hooks - **`useCurrentTime.ts`**: Real-time clock functionality with automatic updates - **`useOptimizedVariableState.ts`**: Performance-optimized variable state management - **`useVariableSummaryCache.ts`**: Caching layer for expensive variable calculations ### Variable System Hooks - **`useItemVariables.ts`**: Item-specific variable managemen",
      "lastModifiedEpoch": 1755099696092
    },
    {
      "path": "docs/meta/PROCESS.md",
      "title": "Documentation & Process Governance",
      "breadcrumb": "Docs > Meta > Process Governance",
      "size": 3446,
      "headings": [
        "Purpose",
        "Pillars",
        "Required Local Commands",
        "Change Workflow (Developer Checklist)",
        "Drift Detection Strategy",
        "Link & Anchor Integrity",
        "AI Context Generation",
        "Adding New Authoritative Doc",
        "Future Enhancements",
        "Source of Truth Files",
        "Conventions"
      ],
      "openQuestions": [
        "`npm run docs:validate`",
        "`npm run docs:drift`",
        "`npm run docs:links`",
        "`npm run docs:context`"
      ],
      "excerpt": "# Documentation & Process Governance Breadcrumb: Docs > Meta > Process Governance <!-- Navigational (rich) breadcrumb for humans --> [Home](../README.md) / Meta / Process Governance Authoritative: Yes Last Updated: <!-- date --> ## Purpose Establish guardrails so every code change and AI interaction keeps the doc graph accurate, navigable, and trustworthy. ## Pillars 1. Hierarchy & Breadcrumb Integrity 2. Coverage Mapping (code → authoritative doc) 3. Drift Detection (changed code without updated doc excerpts) 4. Link & Anchor Integrity 5. Repeatable Context Generation for AI Agents 6. CI & Local Hooks Enforcement ## Required Local Commands * Validate breadcrumbs: `npm run docs:validate` * Auto‑fix breadcrumbs: `npm run docs:validate:fix` * Update breadcrumb map (add new docs): `npm run do",
      "lastModifiedEpoch": 1755100496891
    }
  ]
}
